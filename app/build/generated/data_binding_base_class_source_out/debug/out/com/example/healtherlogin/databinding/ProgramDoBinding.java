// Generated by view binder compiler. Do not edit!
package com.example.healtherlogin.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.healtherlogin.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProgramDoBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox h1c1;

  @NonNull
  public final CheckBox h1c2;

  @NonNull
  public final CheckBox h1c3;

  @NonNull
  public final CheckBox h1c4;

  @NonNull
  public final CheckBox h1c5;

  @NonNull
  public final CheckBox h2c1;

  @NonNull
  public final CheckBox h2c2;

  @NonNull
  public final CheckBox h2c3;

  @NonNull
  public final CheckBox h2c4;

  @NonNull
  public final CheckBox h2c5;

  @NonNull
  public final CheckBox h3c1;

  @NonNull
  public final CheckBox h3c2;

  @NonNull
  public final CheckBox h3c3;

  @NonNull
  public final CheckBox h3c4;

  @NonNull
  public final CheckBox h3c5;

  @NonNull
  public final TextView health1;

  @NonNull
  public final TextView health2;

  @NonNull
  public final TextView health3;

  private ProgramDoBinding(@NonNull LinearLayout rootView, @NonNull CheckBox h1c1,
      @NonNull CheckBox h1c2, @NonNull CheckBox h1c3, @NonNull CheckBox h1c4,
      @NonNull CheckBox h1c5, @NonNull CheckBox h2c1, @NonNull CheckBox h2c2,
      @NonNull CheckBox h2c3, @NonNull CheckBox h2c4, @NonNull CheckBox h2c5,
      @NonNull CheckBox h3c1, @NonNull CheckBox h3c2, @NonNull CheckBox h3c3,
      @NonNull CheckBox h3c4, @NonNull CheckBox h3c5, @NonNull TextView health1,
      @NonNull TextView health2, @NonNull TextView health3) {
    this.rootView = rootView;
    this.h1c1 = h1c1;
    this.h1c2 = h1c2;
    this.h1c3 = h1c3;
    this.h1c4 = h1c4;
    this.h1c5 = h1c5;
    this.h2c1 = h2c1;
    this.h2c2 = h2c2;
    this.h2c3 = h2c3;
    this.h2c4 = h2c4;
    this.h2c5 = h2c5;
    this.h3c1 = h3c1;
    this.h3c2 = h3c2;
    this.h3c3 = h3c3;
    this.h3c4 = h3c4;
    this.h3c5 = h3c5;
    this.health1 = health1;
    this.health2 = health2;
    this.health3 = health3;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ProgramDoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProgramDoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.program_do, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProgramDoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.h1c1;
      CheckBox h1c1 = ViewBindings.findChildViewById(rootView, id);
      if (h1c1 == null) {
        break missingId;
      }

      id = R.id.h1c2;
      CheckBox h1c2 = ViewBindings.findChildViewById(rootView, id);
      if (h1c2 == null) {
        break missingId;
      }

      id = R.id.h1c3;
      CheckBox h1c3 = ViewBindings.findChildViewById(rootView, id);
      if (h1c3 == null) {
        break missingId;
      }

      id = R.id.h1c4;
      CheckBox h1c4 = ViewBindings.findChildViewById(rootView, id);
      if (h1c4 == null) {
        break missingId;
      }

      id = R.id.h1c5;
      CheckBox h1c5 = ViewBindings.findChildViewById(rootView, id);
      if (h1c5 == null) {
        break missingId;
      }

      id = R.id.h2c1;
      CheckBox h2c1 = ViewBindings.findChildViewById(rootView, id);
      if (h2c1 == null) {
        break missingId;
      }

      id = R.id.h2c2;
      CheckBox h2c2 = ViewBindings.findChildViewById(rootView, id);
      if (h2c2 == null) {
        break missingId;
      }

      id = R.id.h2c3;
      CheckBox h2c3 = ViewBindings.findChildViewById(rootView, id);
      if (h2c3 == null) {
        break missingId;
      }

      id = R.id.h2c4;
      CheckBox h2c4 = ViewBindings.findChildViewById(rootView, id);
      if (h2c4 == null) {
        break missingId;
      }

      id = R.id.h2c5;
      CheckBox h2c5 = ViewBindings.findChildViewById(rootView, id);
      if (h2c5 == null) {
        break missingId;
      }

      id = R.id.h3c1;
      CheckBox h3c1 = ViewBindings.findChildViewById(rootView, id);
      if (h3c1 == null) {
        break missingId;
      }

      id = R.id.h3c2;
      CheckBox h3c2 = ViewBindings.findChildViewById(rootView, id);
      if (h3c2 == null) {
        break missingId;
      }

      id = R.id.h3c3;
      CheckBox h3c3 = ViewBindings.findChildViewById(rootView, id);
      if (h3c3 == null) {
        break missingId;
      }

      id = R.id.h3c4;
      CheckBox h3c4 = ViewBindings.findChildViewById(rootView, id);
      if (h3c4 == null) {
        break missingId;
      }

      id = R.id.h3c5;
      CheckBox h3c5 = ViewBindings.findChildViewById(rootView, id);
      if (h3c5 == null) {
        break missingId;
      }

      id = R.id.health1;
      TextView health1 = ViewBindings.findChildViewById(rootView, id);
      if (health1 == null) {
        break missingId;
      }

      id = R.id.health2;
      TextView health2 = ViewBindings.findChildViewById(rootView, id);
      if (health2 == null) {
        break missingId;
      }

      id = R.id.health3;
      TextView health3 = ViewBindings.findChildViewById(rootView, id);
      if (health3 == null) {
        break missingId;
      }

      return new ProgramDoBinding((LinearLayout) rootView, h1c1, h1c2, h1c3, h1c4, h1c5, h2c1, h2c2,
          h2c3, h2c4, h2c5, h3c1, h3c2, h3c3, h3c4, h3c5, health1, health2, health3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
