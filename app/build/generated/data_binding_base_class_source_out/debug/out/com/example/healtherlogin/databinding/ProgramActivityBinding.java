// Generated by view binder compiler. Do not edit!
package com.example.healtherlogin.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.healtherlogin.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProgramActivityBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button program1;

  @NonNull
  public final Button program2;

  @NonNull
  public final Button program3;

  @NonNull
  public final Button program4;

  @NonNull
  public final Button program5;

  @NonNull
  public final Button program6;

  private ProgramActivityBinding(@NonNull RelativeLayout rootView, @NonNull Button program1,
      @NonNull Button program2, @NonNull Button program3, @NonNull Button program4,
      @NonNull Button program5, @NonNull Button program6) {
    this.rootView = rootView;
    this.program1 = program1;
    this.program2 = program2;
    this.program3 = program3;
    this.program4 = program4;
    this.program5 = program5;
    this.program6 = program6;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ProgramActivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProgramActivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.program_activity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProgramActivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.program_1;
      Button program1 = ViewBindings.findChildViewById(rootView, id);
      if (program1 == null) {
        break missingId;
      }

      id = R.id.program_2;
      Button program2 = ViewBindings.findChildViewById(rootView, id);
      if (program2 == null) {
        break missingId;
      }

      id = R.id.program_3;
      Button program3 = ViewBindings.findChildViewById(rootView, id);
      if (program3 == null) {
        break missingId;
      }

      id = R.id.program_4;
      Button program4 = ViewBindings.findChildViewById(rootView, id);
      if (program4 == null) {
        break missingId;
      }

      id = R.id.program_5;
      Button program5 = ViewBindings.findChildViewById(rootView, id);
      if (program5 == null) {
        break missingId;
      }

      id = R.id.program_6;
      Button program6 = ViewBindings.findChildViewById(rootView, id);
      if (program6 == null) {
        break missingId;
      }

      return new ProgramActivityBinding((RelativeLayout) rootView, program1, program2, program3,
          program4, program5, program6);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
