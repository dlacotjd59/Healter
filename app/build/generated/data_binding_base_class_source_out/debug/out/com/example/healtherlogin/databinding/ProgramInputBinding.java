// Generated by view binder compiler. Do not edit!
package com.example.healtherlogin.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.healtherlogin.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProgramInputBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText inputBab;

  @NonNull
  public final EditText inputBen;

  @NonNull
  public final EditText inputDea;

  @NonNull
  public final EditText inputOve;

  @NonNull
  public final EditText inputSqu;

  private ProgramInputBinding(@NonNull LinearLayout rootView, @NonNull EditText inputBab,
      @NonNull EditText inputBen, @NonNull EditText inputDea, @NonNull EditText inputOve,
      @NonNull EditText inputSqu) {
    this.rootView = rootView;
    this.inputBab = inputBab;
    this.inputBen = inputBen;
    this.inputDea = inputDea;
    this.inputOve = inputOve;
    this.inputSqu = inputSqu;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ProgramInputBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProgramInputBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.program_input, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProgramInputBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.input_bab;
      EditText inputBab = ViewBindings.findChildViewById(rootView, id);
      if (inputBab == null) {
        break missingId;
      }

      id = R.id.input_ben;
      EditText inputBen = ViewBindings.findChildViewById(rootView, id);
      if (inputBen == null) {
        break missingId;
      }

      id = R.id.input_dea;
      EditText inputDea = ViewBindings.findChildViewById(rootView, id);
      if (inputDea == null) {
        break missingId;
      }

      id = R.id.input_ove;
      EditText inputOve = ViewBindings.findChildViewById(rootView, id);
      if (inputOve == null) {
        break missingId;
      }

      id = R.id.input_squ;
      EditText inputSqu = ViewBindings.findChildViewById(rootView, id);
      if (inputSqu == null) {
        break missingId;
      }

      return new ProgramInputBinding((LinearLayout) rootView, inputBab, inputBen, inputDea,
          inputOve, inputSqu);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
